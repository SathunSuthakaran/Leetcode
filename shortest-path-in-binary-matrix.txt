class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        queue = deque()
        n = len(grid)
        if grid[0][0] == 1:
            return -1
        if grid[n-1][n-1] == 1:
            return -1
        if n == 1:
            return 1
        directions = [(0, 1), (1, 0), (-1, 0), (0, -1), (1, 1), (-1, -1), (1, -1), (-1, 1)]
        
        queue.append((0, 0))
        visited = set()
        visited.add((0, 0))
        length = 1
        while queue:
            for _ in range(len(queue)):
                x,y = queue.popleft()
            
                for dx, dy in directions:
                    nx, ny = dx+x, dy+y
                    if nx < 0 or nx >= n or ny < 0 or ny >= n:
                        continue
                    elif nx == ny and ny == (n-1):
                        return length + 1
                    elif (nx, ny) not in visited and grid[nx][ny] == 0:
                        visited.add((nx, ny))
                        queue.append((nx, ny))
            length +=1
        
        return -1