class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        def backtrack(start, target, path):
            # Base case: exact match
            if target == 0:
                result.append(list(path))
                return
            # Explore further
            for i in range(start, len(candidates)):
                if candidates[i] > target:
                    continue
                # Include the candidate and recurse
                path.append(candidates[i])
                backtrack(i, target - candidates[i], path)
                path.pop()  # Backtrack

        result = []
        backtrack(0, target, [])
        return result
            