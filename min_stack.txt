class MinStack:

    def __init__(self):
        self.stack = []
        self.curr_min = [100000000000000, 100000000000]
        self.length = 0
    def push(self, val: int) -> None:
        self.stack.append(val)
        self.length +=1
        if val < self.curr_min[0]:
            self.curr_min = [val, 1]
        elif val == self.curr_min[0]:
            self.curr_min[1] +=1

    def pop(self) -> None:
        minu = self.stack.pop(-1)
        self.length -=1
        if self.length != 0:
            if minu == self.curr_min[0]:
                self.curr_min[1] -=1
                if self.curr_min[1] == 0:
                    new_min = min(self.stack)
                    self.curr_min = [new_min, self.stack.count(new_min)]
        else:
            self.curr_min = [100000000000000, 100000000000]  

    def top(self) -> int:
        return self.stack[-1]

    def getMin(self) -> int:
        return self.curr_min[0]


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()