class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        digit_dict = {'2': ['a', 'b', 'c'], '3': ['d','e','f'], '4': ['g','h','i'], '5': ['j', 'k', 'l'], '6': ['m', 'n', 'o'], '7': ['p', 'q', 'r', 's'], '8': ['t', 'u', 'v'], '9': ['w', 'x', 'y', 'z'], '0': [" "]}
        if len(digits) == 0:
            return []
        if len(digits) == 1:
            return digit_dict[digits[0]]
        result = []
        def backtrack(path, digit):
            if len(path) == len(digits):
                result.append(path)
            else:
                for i in digit_dict[digits[digit]]:
                    backtrack(path + i, digit + 1)
        
        backtrack("", 0)

        return result
