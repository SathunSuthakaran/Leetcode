from typing import List

class Solution:
    def canFinish(self, numCourses: int, prerequisites: List[List[int]]) -> bool:
        # Create an adjacency list
        graph = {}
        for course, prereq in prerequisites:
            if course not in graph:
                graph[course] = []
            graph[course].append(prereq)

        # States: 0 = unvisited, 1 = visiting, 2 = visited
        state = [0] * numCourses

        def hasCycle(course):
            if state[course] == 1:  # Cycle detected
                return True
            if state[course] == 2:  # Already checked and no cycle
                return False

            # Mark as visiting
            state[course] = 1
            if course in graph:
                for prereq in graph[course]:
                    if hasCycle(prereq):
                        return True

            # Mark as visited
            state[course] = 2
            return False

        # Check all courses for cycles
        for course in range(numCourses):
            if hasCycle(course):
                return False


        return True
