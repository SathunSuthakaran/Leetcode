class Solution:
    def solve(self, board: List[List[str]]) -> None:
        rows = len(board)
        cols = len(board[0])
        copy = [[True for _ in range(cols)] for _ in range(rows)]
        visited = set()
        def dfs(row, col):
            if row < rows and col < cols and row >=0 and col >= 0 and board[row][col] == 'O' and (row, col) not in visited:
                copy[row][col] = False
                visited.add((row, col))
                dfs(row-1, col)
                dfs(row+1, col)
                dfs(row, col - 1)
                dfs(row, col + 1)
        
        for i in range(0, rows):
            if board[i][0] == 'O':
                dfs(i, 0)
            if board[i][cols-1] == 'O':
                dfs(i, cols-1)
        
        for i in range(0, cols):
            if board[0][i] == 'O':
                dfs(0, i)
            if board[rows-1][i] == 'O':
                dfs(rows-1, i)
        
        for i in range(rows):
            for j in range(cols):
                if copy[i][j]:
                    board[i][j] = 'X'